'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodemailer = require('nodemailer');

var _nodemailer2 = _interopRequireDefault(_nodemailer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var emailsender = function () {
  function emailsender(serverConfig) {
    _classCallCheck(this, emailsender);

    this.serverConfig = serverConfig;
    this.transporter = _nodemailer2.default.createTransport(serverConfig);
  }

  //use promise not callback


  _createClass(emailsender, [{
    key: 'promise',
    value: function promise() {
      this.promiseMode = true;
      return this;
    }
  }, {
    key: 'sendAction',
    value: function sendAction(handler) {
      this.transporter.sendMail(this.mailConfig, function (err, info) {
        handler(err, info);
      });
    }
  }, {
    key: 'send',
    value: function send(mailConfig, callback) {
      var _this = this;

      this.mailConfig = mailConfig;

      if (this.promiseMode) {
        return new Promise(function (resolve, reject) {
          _this.sendAction(function (err, info) {
            if (!!err) {
              reject(err);
            } else {
              resolve(info);
            }
          });
        });
      } else {
        this.sendAction(function (err, info) {
          callback(err, info);
        });
      }
    }

    //163 mail deny email's from field not equal emailserver's user 

  }, {
    key: 'send163',
    value: function send163(mailConfig, callback) {
      this.send(Object.assign(mailConfig, { from: this.serverConfig.auth.user }), callback);
    }
  }]);

  return emailsender;
}();

exports.default = emailsender;
module.exports = exports['default'];